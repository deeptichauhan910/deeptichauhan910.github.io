{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor() {\n      this.DEPARTMENTS_KEY = 'management_departments';\n      this.EMPLOYEES_KEY = 'management_employees';\n      this.DATA_INITIALIZED_KEY = 'management_data_initialized';\n      this.departmentsSubject = new BehaviorSubject([]);\n      this.employeesSubject = new BehaviorSubject([]);\n      this.departments$ = this.departmentsSubject.asObservable();\n      this.employees$ = this.employeesSubject.asObservable();\n      this.initializeData();\n    }\n    initializeData() {\n      if (!localStorage.getItem(this.DATA_INITIALIZED_KEY)) {\n        this.generateSampleData();\n        localStorage.setItem(this.DATA_INITIALIZED_KEY, 'true');\n      }\n      this.loadData();\n    }\n    loadData() {\n      const departments = this.getDepartmentsFromStorage();\n      const employees = this.getEmployeesFromStorage();\n      this.departmentsSubject.next(departments);\n      this.employeesSubject.next(employees);\n    }\n    getDepartmentsFromStorage() {\n      const data = localStorage.getItem(this.DEPARTMENTS_KEY);\n      return data ? JSON.parse(data) : [];\n    }\n    getEmployeesFromStorage() {\n      const data = localStorage.getItem(this.EMPLOYEES_KEY);\n      if (data) {\n        const employees = JSON.parse(data);\n        return employees.map(emp => ({\n          ...emp,\n          hireDate: new Date(emp.hireDate),\n          createdDate: new Date(emp.createdDate),\n          updatedDate: new Date(emp.updatedDate)\n        }));\n      }\n      return [];\n    }\n    saveDepartmentsToStorage(departments) {\n      localStorage.setItem(this.DEPARTMENTS_KEY, JSON.stringify(departments));\n      this.departmentsSubject.next(departments);\n    }\n    saveEmployeesToStorage(employees) {\n      localStorage.setItem(this.EMPLOYEES_KEY, JSON.stringify(employees));\n      this.employeesSubject.next(employees);\n    }\n    // Department CRUD operations\n    getAllDepartments() {\n      return this.getDepartmentsFromStorage();\n    }\n    getDepartmentById(id) {\n      return this.getDepartmentsFromStorage().find(dept => dept.id === id);\n    }\n    createDepartment(department) {\n      const departments = this.getDepartmentsFromStorage();\n      const newDepartment = {\n        ...department,\n        id: this.generateId(),\n        createdDate: new Date(),\n        updatedDate: new Date()\n      };\n      departments.push(newDepartment);\n      this.saveDepartmentsToStorage(departments);\n      return newDepartment;\n    }\n    updateDepartment(id, updates) {\n      const departments = this.getDepartmentsFromStorage();\n      const index = departments.findIndex(dept => dept.id === id);\n      if (index !== -1) {\n        departments[index] = {\n          ...departments[index],\n          ...updates,\n          id,\n          updatedDate: new Date()\n        };\n        this.saveDepartmentsToStorage(departments);\n        return departments[index];\n      }\n      return null;\n    }\n    deleteDepartment(id) {\n      const departments = this.getDepartmentsFromStorage();\n      const employees = this.getEmployeesFromStorage();\n      // Check if department has employees\n      const hasEmployees = employees.some(emp => emp.departmentId === id);\n      if (hasEmployees) {\n        throw new Error('Cannot delete department with existing employees');\n      }\n      const filteredDepartments = departments.filter(dept => dept.id !== id);\n      if (filteredDepartments.length !== departments.length) {\n        this.saveDepartmentsToStorage(filteredDepartments);\n        return true;\n      }\n      return false;\n    }\n    // Employee CRUD operations\n    getAllEmployees() {\n      return this.getEmployeesFromStorage();\n    }\n    getEmployeeById(id) {\n      return this.getEmployeesFromStorage().find(emp => emp.id === id);\n    }\n    createEmployee(employee) {\n      const employees = this.getEmployeesFromStorage();\n      const newEmployee = {\n        ...employee,\n        id: this.generateId(),\n        createdDate: new Date(),\n        updatedDate: new Date()\n      };\n      employees.push(newEmployee);\n      this.saveEmployeesToStorage(employees);\n      this.updateDepartmentEmployeeCount(newEmployee.departmentId);\n      return newEmployee;\n    }\n    updateEmployee(id, updates) {\n      const employees = this.getEmployeesFromStorage();\n      const index = employees.findIndex(emp => emp.id === id);\n      if (index !== -1) {\n        const oldDepartmentId = employees[index].departmentId;\n        employees[index] = {\n          ...employees[index],\n          ...updates,\n          id,\n          updatedDate: new Date()\n        };\n        this.saveEmployeesToStorage(employees);\n        // Update department counts if department changed\n        if (updates.departmentId && updates.departmentId !== oldDepartmentId) {\n          this.updateDepartmentEmployeeCount(oldDepartmentId);\n          this.updateDepartmentEmployeeCount(updates.departmentId);\n        }\n        return employees[index];\n      }\n      return null;\n    }\n    deleteEmployee(id) {\n      const employees = this.getEmployeesFromStorage();\n      const employee = employees.find(emp => emp.id === id);\n      if (employee) {\n        const filteredEmployees = employees.filter(emp => emp.id !== id);\n        this.saveEmployeesToStorage(filteredEmployees);\n        this.updateDepartmentEmployeeCount(employee.departmentId);\n        return true;\n      }\n      return false;\n    }\n    // Search and pagination\n    searchEmployees(criteria, page = 1, pageSize = 20) {\n      let employees = this.getEmployeesFromStorage();\n      // Apply search filters\n      if (criteria.searchTerm) {\n        const searchTerm = criteria.searchTerm.toLowerCase();\n        employees = employees.filter(emp => emp.firstName.toLowerCase().includes(searchTerm) || emp.lastName.toLowerCase().includes(searchTerm) || emp.email.toLowerCase().includes(searchTerm) || emp.position.toLowerCase().includes(searchTerm));\n      }\n      if (criteria.departmentId) {\n        employees = employees.filter(emp => emp.departmentId === criteria.departmentId);\n      }\n      if (criteria.status) {\n        employees = employees.filter(emp => emp.status === criteria.status);\n      }\n      // Apply pagination\n      const totalItems = employees.length;\n      const totalPages = Math.ceil(totalItems / pageSize);\n      const startIndex = (page - 1) * pageSize;\n      const endIndex = startIndex + pageSize;\n      const paginatedEmployees = employees.slice(startIndex, endIndex);\n      return {\n        data: paginatedEmployees,\n        totalItems,\n        currentPage: page,\n        pageSize,\n        totalPages\n      };\n    }\n    getDepartmentsPaginated(page = 1, pageSize = 20) {\n      const departments = this.getDepartmentsFromStorage();\n      const totalItems = departments.length;\n      const totalPages = Math.ceil(totalItems / pageSize);\n      const startIndex = (page - 1) * pageSize;\n      const endIndex = startIndex + pageSize;\n      const paginatedDepartments = departments.slice(startIndex, endIndex);\n      return {\n        data: paginatedDepartments,\n        totalItems,\n        currentPage: page,\n        pageSize,\n        totalPages\n      };\n    }\n    updateDepartmentEmployeeCount(departmentId) {\n      const employees = this.getEmployeesFromStorage();\n      const departments = this.getDepartmentsFromStorage();\n      const employeeCount = employees.filter(emp => emp.departmentId === departmentId).length;\n      const departmentIndex = departments.findIndex(dept => dept.id === departmentId);\n      if (departmentIndex !== -1) {\n        departments[departmentIndex].employeeCount = employeeCount;\n        departments[departmentIndex].updatedDate = new Date();\n        this.saveDepartmentsToStorage(departments);\n      }\n    }\n    generateId() {\n      return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n    generateSampleData() {\n      // Create departments\n      const departments = [{\n        id: this.generateId(),\n        name: 'Human Resources',\n        description: 'Manages employee relations, recruitment, and HR policies',\n        manager: 'Sarah Johnson',\n        budget: 500000,\n        employeeCount: 0,\n        createdDate: new Date(),\n        updatedDate: new Date()\n      }, {\n        id: this.generateId(),\n        name: 'Information Technology',\n        description: 'Handles all technology infrastructure and software development',\n        manager: 'Michael Chen',\n        budget: 1200000,\n        employeeCount: 0,\n        createdDate: new Date(),\n        updatedDate: new Date()\n      }, {\n        id: this.generateId(),\n        name: 'Finance',\n        description: 'Manages financial planning, accounting, and budgeting',\n        manager: 'Jennifer Davis',\n        budget: 800000,\n        employeeCount: 0,\n        createdDate: new Date(),\n        updatedDate: new Date()\n      }, {\n        id: this.generateId(),\n        name: 'Marketing',\n        description: 'Responsible for brand promotion and customer acquisition',\n        manager: 'David Wilson',\n        budget: 900000,\n        employeeCount: 0,\n        createdDate: new Date(),\n        updatedDate: new Date()\n      }, {\n        id: this.generateId(),\n        name: 'Operations',\n        description: 'Oversees daily business operations and process improvement',\n        manager: 'Lisa Anderson',\n        budget: 700000,\n        employeeCount: 0,\n        createdDate: new Date(),\n        updatedDate: new Date()\n      }, {\n        id: this.generateId(),\n        name: 'Sales',\n        description: 'Drives revenue growth through customer relationships and sales',\n        manager: 'Robert Taylor',\n        budget: 1000000,\n        employeeCount: 0,\n        createdDate: new Date(),\n        updatedDate: new Date()\n      }];\n      localStorage.setItem(this.DEPARTMENTS_KEY, JSON.stringify(departments));\n      // Generate 50 employees\n      const firstNames = ['John', 'Jane', 'Michael', 'Sarah', 'David', 'Emily', 'Robert', 'Lisa', 'William', 'Jennifer', 'Christopher', 'Amanda', 'Daniel', 'Jessica', 'Matthew', 'Ashley', 'Anthony', 'Stephanie', 'Mark', 'Michelle', 'Steven', 'Kimberly', 'Paul', 'Donna', 'Andrew'];\n      const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson', 'Thomas', 'Taylor', 'Moore', 'Jackson', 'Martin', 'Lee', 'Perez', 'Thompson', 'White', 'Harris'];\n      const positions = ['Developer', 'Analyst', 'Manager', 'Coordinator', 'Specialist', 'Associate', 'Director', 'Supervisor', 'Representative', 'Consultant'];\n      const cities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose'];\n      const states = ['NY', 'CA', 'IL', 'TX', 'AZ', 'PA', 'TX', 'CA', 'TX', 'CA'];\n      const statuses = ['Active', 'Active', 'Active', 'Active', 'Inactive', 'On Leave'];\n      const employees = [];\n      for (let i = 0; i < 50; i++) {\n        const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\n        const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\n        const departmentId = departments[Math.floor(Math.random() * departments.length)].id;\n        const cityIndex = Math.floor(Math.random() * cities.length);\n        employees.push({\n          id: this.generateId(),\n          firstName,\n          lastName,\n          email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@company.com`,\n          phone: `(${Math.floor(Math.random() * 900) + 100}) ${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`,\n          departmentId,\n          position: positions[Math.floor(Math.random() * positions.length)],\n          salary: Math.floor(Math.random() * 100000) + 40000,\n          hireDate: new Date(2020 + Math.floor(Math.random() * 5), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),\n          status: statuses[Math.floor(Math.random() * statuses.length)],\n          address: {\n            street: `${Math.floor(Math.random() * 9999) + 1} ${['Main', 'Oak', 'Pine', 'Elm', 'Cedar'][Math.floor(Math.random() * 5)]} St`,\n            city: cities[cityIndex],\n            state: states[cityIndex],\n            zipCode: (Math.floor(Math.random() * 90000) + 10000).toString()\n          },\n          createdDate: new Date(),\n          updatedDate: new Date()\n        });\n      }\n      localStorage.setItem(this.EMPLOYEES_KEY, JSON.stringify(employees));\n      // Update department employee counts\n      departments.forEach(dept => {\n        dept.employeeCount = employees.filter(emp => emp.departmentId === dept.id).length;\n      });\n      localStorage.setItem(this.DEPARTMENTS_KEY, JSON.stringify(departments));\n    }\n    static {\n      this.ɵfac = function DataService_Factory(t) {\n        return new (t || DataService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: DataService,\n        factory: DataService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}