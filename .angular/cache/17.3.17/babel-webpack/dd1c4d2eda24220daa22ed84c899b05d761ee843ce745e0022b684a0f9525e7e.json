{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class DataService {\n  constructor() {\n    this.DEPARTMENTS_KEY = 'management_departments';\n    this.EMPLOYEES_KEY = 'management_employees';\n    this.DATA_INITIALIZED_KEY = 'management_data_initialized';\n    this.departmentsSubject = new BehaviorSubject([]);\n    this.employeesSubject = new BehaviorSubject([]);\n    this.departments$ = this.departmentsSubject.asObservable();\n    this.employees$ = this.employeesSubject.asObservable();\n    this.initializeData();\n  }\n  initializeData() {\n    if (!localStorage.getItem(this.DATA_INITIALIZED_KEY)) {\n      this.generateSampleData();\n      localStorage.setItem(this.DATA_INITIALIZED_KEY, 'true');\n    }\n    this.loadData();\n  }\n  loadData() {\n    const departments = this.getDepartmentsFromStorage();\n    const employees = this.getEmployeesFromStorage();\n    this.departmentsSubject.next(departments);\n    this.employeesSubject.next(employees);\n  }\n  getDepartmentsFromStorage() {\n    const data = localStorage.getItem(this.DEPARTMENTS_KEY);\n    return data ? JSON.parse(data) : [];\n  }\n  getEmployeesFromStorage() {\n    const data = localStorage.getItem(this.EMPLOYEES_KEY);\n    if (data) {\n      const employees = JSON.parse(data);\n      return employees.map(emp => ({\n        ...emp,\n        hireDate: new Date(emp.hireDate),\n        createdDate: new Date(emp.createdDate),\n        updatedDate: new Date(emp.updatedDate)\n      }));\n    }\n    return [];\n  }\n  saveDepartmentsToStorage(departments) {\n    localStorage.setItem(this.DEPARTMENTS_KEY, JSON.stringify(departments));\n    this.departmentsSubject.next(departments);\n  }\n  saveEmployeesToStorage(employees) {\n    localStorage.setItem(this.EMPLOYEES_KEY, JSON.stringify(employees));\n    this.employeesSubject.next(employees);\n  }\n  // Department CRUD operations\n  getAllDepartments() {\n    return this.getDepartmentsFromStorage();\n  }\n  getDepartmentById(id) {\n    return this.getDepartmentsFromStorage().find(dept => dept.id === id);\n  }\n  createDepartment(department) {\n    const departments = this.getDepartmentsFromStorage();\n    const newDepartment = {\n      ...department,\n      id: this.generateId(),\n      createdDate: new Date(),\n      updatedDate: new Date()\n    };\n    departments.push(newDepartment);\n    this.saveDepartmentsToStorage(departments);\n    return newDepartment;\n  }\n  updateDepartment(id, updates) {\n    const departments = this.getDepartmentsFromStorage();\n    const index = departments.findIndex(dept => dept.id === id);\n    if (index !== -1) {\n      departments[index] = {\n        ...departments[index],\n        ...updates,\n        id,\n        updatedDate: new Date()\n      };\n      this.saveDepartmentsToStorage(departments);\n      return departments[index];\n    }\n    return null;\n  }\n  deleteDepartment(id) {\n    const departments = this.getDepartmentsFromStorage();\n    const employees = this.getEmployeesFromStorage();\n    // Check if department has employees\n    const hasEmployees = employees.some(emp => emp.departmentId === id);\n    if (hasEmployees) {\n      throw new Error('Cannot delete department with existing employees');\n    }\n    const filteredDepartments = departments.filter(dept => dept.id !== id);\n    if (filteredDepartments.length !== departments.length) {\n      this.saveDepartmentsToStorage(filteredDepartments);\n      return true;\n    }\n    return false;\n  }\n  // Employee CRUD operations\n  getAllEmployees() {\n    return this.getEmployeesFromStorage();\n  }\n  getEmployeeById(id) {\n    return this.getEmployeesFromStorage().find(emp => emp.id === id);\n  }\n  createEmployee(employee) {\n    const employees = this.getEmployeesFromStorage();\n    const newEmployee = {\n      ...employee,\n      id: this.generateId(),\n      createdDate: new Date(),\n      updatedDate: new Date()\n    };\n    employees.push(newEmployee);\n    this.saveEmployeesToStorage(employees);\n    this.updateDepartmentEmployeeCount(newEmployee.departmentId);\n    return newEmployee;\n  }\n  updateEmployee(id, updates) {\n    const employees = this.getEmployeesFromStorage();\n    const index = employees.findIndex(emp => emp.id === id);\n    if (index !== -1) {\n      const oldDepartmentId = employees[index].departmentId;\n      employees[index] = {\n        ...employees[index],\n        ...updates,\n        id,\n        updatedDate: new Date()\n      };\n      this.saveEmployeesToStorage(employees);\n      // Update department counts if department changed\n      if (updates.departmentId && updates.departmentId !== oldDepartmentId) {\n        this.updateDepartmentEmployeeCount(oldDepartmentId);\n        this.updateDepartmentEmployeeCount(updates.departmentId);\n      }\n      return employees[index];\n    }\n    return null;\n  }\n  deleteEmployee(id) {\n    const employees = this.getEmployeesFromStorage();\n    const employee = employees.find(emp => emp.id === id);\n    if (employee) {\n      const filteredEmployees = employees.filter(emp => emp.id !== id);\n      this.saveEmployeesToStorage(filteredEmployees);\n      this.updateDepartmentEmployeeCount(employee.departmentId);\n      return true;\n    }\n    return false;\n  }\n  // Search and pagination\n  searchEmployees(criteria, page = 1, pageSize = 20) {\n    let employees = this.getEmployeesFromStorage();\n    // Apply search filters\n    if (criteria.searchTerm) {\n      const searchTerm = criteria.searchTerm.toLowerCase();\n      employees = employees.filter(emp => emp.firstName.toLowerCase().includes(searchTerm) || emp.lastName.toLowerCase().includes(searchTerm) || emp.email.toLowerCase().includes(searchTerm) || emp.position.toLowerCase().includes(searchTerm));\n    }\n    if (criteria.departmentId) {\n      employees = employees.filter(emp => emp.departmentId === criteria.departmentId);\n    }\n    if (criteria.status) {\n      employees = employees.filter(emp => emp.status === criteria.status);\n    }\n    // Apply pagination\n    const totalItems = employees.length;\n    const totalPages = Math.ceil(totalItems / pageSize);\n    const startIndex = (page - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    const paginatedEmployees = employees.slice(startIndex, endIndex);\n    return {\n      data: paginatedEmployees,\n      totalItems,\n      currentPage: page,\n      pageSize,\n      totalPages\n    };\n  }\n  getDepartmentsPaginated(page = 1, pageSize = 20) {\n    const departments = this.getDepartmentsFromStorage();\n    const totalItems = departments.length;\n    const totalPages = Math.ceil(totalItems / pageSize);\n    const startIndex = (page - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    const paginatedDepartments = departments.slice(startIndex, endIndex);\n    return {\n      data: paginatedDepartments,\n      totalItems,\n      currentPage: page,\n      pageSize,\n      totalPages\n    };\n  }\n  updateDepartmentEmployeeCount(departmentId) {\n    const employees = this.getEmployeesFromStorage();\n    const departments = this.getDepartmentsFromStorage();\n    const employeeCount = employees.filter(emp => emp.departmentId === departmentId).length;\n    const departmentIndex = departments.findIndex(dept => dept.id === departmentId);\n    if (departmentIndex !== -1) {\n      departments[departmentIndex].employeeCount = employeeCount;\n      departments[departmentIndex].updatedDate = new Date();\n      this.saveDepartmentsToStorage(departments);\n    }\n  }\n  generateId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n  generateSampleData() {\n    // Create departments\n    const departments = [{\n      id: this.generateId(),\n      name: 'Human Resources',\n      description: 'Manages employee relations, recruitment, and HR policies',\n      manager: 'Sarah Johnson',\n      budget: 500000,\n      employeeCount: 0,\n      createdDate: new Date(),\n      updatedDate: new Date()\n    }, {\n      id: this.generateId(),\n      name: 'Information Technology',\n      description: 'Handles all technology infrastructure and software development',\n      manager: 'Michael Chen',\n      budget: 1200000,\n      employeeCount: 0,\n      createdDate: new Date(),\n      updatedDate: new Date()\n    }, {\n      id: this.generateId(),\n      name: 'Finance',\n      description: 'Manages financial planning, accounting, and budgeting',\n      manager: 'Jennifer Davis',\n      budget: 800000,\n      employeeCount: 0,\n      createdDate: new Date(),\n      updatedDate: new Date()\n    }, {\n      id: this.generateId(),\n      name: 'Marketing',\n      description: 'Responsible for brand promotion and customer acquisition',\n      manager: 'David Wilson',\n      budget: 900000,\n      employeeCount: 0,\n      createdDate: new Date(),\n      updatedDate: new Date()\n    }, {\n      id: this.generateId(),\n      name: 'Operations',\n      description: 'Oversees daily business operations and process improvement',\n      manager: 'Lisa Anderson',\n      budget: 700000,\n      employeeCount: 0,\n      createdDate: new Date(),\n      updatedDate: new Date()\n    }, {\n      id: this.generateId(),\n      name: 'Sales',\n      description: 'Drives revenue growth through customer relationships and sales',\n      manager: 'Robert Taylor',\n      budget: 1000000,\n      employeeCount: 0,\n      createdDate: new Date(),\n      updatedDate: new Date()\n    }];\n    localStorage.setItem(this.DEPARTMENTS_KEY, JSON.stringify(departments));\n    // Generate 50 employees\n    const firstNames = ['John', 'Jane', 'Michael', 'Sarah', 'David', 'Emily', 'Robert', 'Lisa', 'William', 'Jennifer', 'Christopher', 'Amanda', 'Daniel', 'Jessica', 'Matthew', 'Ashley', 'Anthony', 'Stephanie', 'Mark', 'Michelle', 'Steven', 'Kimberly', 'Paul', 'Donna', 'Andrew'];\n    const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson', 'Thomas', 'Taylor', 'Moore', 'Jackson', 'Martin', 'Lee', 'Perez', 'Thompson', 'White', 'Harris'];\n    const positions = ['Developer', 'Analyst', 'Manager', 'Coordinator', 'Specialist', 'Associate', 'Director', 'Supervisor', 'Representative', 'Consultant'];\n    const cities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose'];\n    const states = ['NY', 'CA', 'IL', 'TX', 'AZ', 'PA', 'TX', 'CA', 'TX', 'CA'];\n    const statuses = ['Active', 'Active', 'Active', 'Active', 'Inactive', 'On Leave'];\n    const employees = [];\n    for (let i = 0; i < 50; i++) {\n      const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\n      const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\n      const departmentId = departments[Math.floor(Math.random() * departments.length)].id;\n      const cityIndex = Math.floor(Math.random() * cities.length);\n      employees.push({\n        id: this.generateId(),\n        firstName,\n        lastName,\n        email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@company.com`,\n        phone: `(${Math.floor(Math.random() * 900) + 100}) ${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`,\n        departmentId,\n        position: positions[Math.floor(Math.random() * positions.length)],\n        salary: Math.floor(Math.random() * 100000) + 40000,\n        hireDate: new Date(2020 + Math.floor(Math.random() * 5), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),\n        status: statuses[Math.floor(Math.random() * statuses.length)],\n        address: {\n          street: `${Math.floor(Math.random() * 9999) + 1} ${['Main', 'Oak', 'Pine', 'Elm', 'Cedar'][Math.floor(Math.random() * 5)]} St`,\n          city: cities[cityIndex],\n          state: states[cityIndex],\n          zipCode: (Math.floor(Math.random() * 90000) + 10000).toString()\n        },\n        createdDate: new Date(),\n        updatedDate: new Date()\n      });\n    }\n    localStorage.setItem(this.EMPLOYEES_KEY, JSON.stringify(employees));\n    // Update department employee counts\n    departments.forEach(dept => {\n      dept.employeeCount = employees.filter(emp => emp.departmentId === dept.id).length;\n    });\n    localStorage.setItem(this.DEPARTMENTS_KEY, JSON.stringify(departments));\n  }\n  static {\n    this.ɵfac = function DataService_Factory(t) {\n      return new (t || DataService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DataService,\n      factory: DataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","DataService","constructor","DEPARTMENTS_KEY","EMPLOYEES_KEY","DATA_INITIALIZED_KEY","departmentsSubject","employeesSubject","departments$","asObservable","employees$","initializeData","localStorage","getItem","generateSampleData","setItem","loadData","departments","getDepartmentsFromStorage","employees","getEmployeesFromStorage","next","data","JSON","parse","map","emp","hireDate","Date","createdDate","updatedDate","saveDepartmentsToStorage","stringify","saveEmployeesToStorage","getAllDepartments","getDepartmentById","id","find","dept","createDepartment","department","newDepartment","generateId","push","updateDepartment","updates","index","findIndex","deleteDepartment","hasEmployees","some","departmentId","Error","filteredDepartments","filter","length","getAllEmployees","getEmployeeById","createEmployee","employee","newEmployee","updateDepartmentEmployeeCount","updateEmployee","oldDepartmentId","deleteEmployee","filteredEmployees","searchEmployees","criteria","page","pageSize","searchTerm","toLowerCase","firstName","includes","lastName","email","position","status","totalItems","totalPages","Math","ceil","startIndex","endIndex","paginatedEmployees","slice","currentPage","getDepartmentsPaginated","paginatedDepartments","employeeCount","departmentIndex","now","toString","random","substr","name","description","manager","budget","firstNames","lastNames","positions","cities","states","statuses","i","floor","cityIndex","phone","salary","address","street","city","state","zipCode","forEach","factory","ɵfac","providedIn"],"sources":["/home/deepti/repos/deeptichauhan910.github.io/src/app/services/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Department, Employee, PaginatedResult, SearchCriteria } from '../models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private readonly DEPARTMENTS_KEY = 'management_departments';\n  private readonly EMPLOYEES_KEY = 'management_employees';\n  private readonly DATA_INITIALIZED_KEY = 'management_data_initialized';\n\n  private departmentsSubject = new BehaviorSubject<Department[]>([]);\n  private employeesSubject = new BehaviorSubject<Employee[]>([]);\n\n  public departments$ = this.departmentsSubject.asObservable();\n  public employees$ = this.employeesSubject.asObservable();\n\n  constructor() {\n    this.initializeData();\n  }\n\n  private initializeData(): void {\n    if (!localStorage.getItem(this.DATA_INITIALIZED_KEY)) {\n      this.generateSampleData();\n      localStorage.setItem(this.DATA_INITIALIZED_KEY, 'true');\n    }\n    this.loadData();\n  }\n\n  private loadData(): void {\n    const departments = this.getDepartmentsFromStorage();\n    const employees = this.getEmployeesFromStorage();\n    \n    this.departmentsSubject.next(departments);\n    this.employeesSubject.next(employees);\n  }\n\n  private getDepartmentsFromStorage(): Department[] {\n    const data = localStorage.getItem(this.DEPARTMENTS_KEY);\n    return data ? JSON.parse(data) : [];\n  }\n\n  private getEmployeesFromStorage(): Employee[] {\n    const data = localStorage.getItem(this.EMPLOYEES_KEY);\n    if (data) {\n      const employees = JSON.parse(data);\n      return employees.map((emp: any) => ({\n        ...emp,\n        hireDate: new Date(emp.hireDate),\n        createdDate: new Date(emp.createdDate),\n        updatedDate: new Date(emp.updatedDate)\n      }));\n    }\n    return [];\n  }\n\n  private saveDepartmentsToStorage(departments: Department[]): void {\n    localStorage.setItem(this.DEPARTMENTS_KEY, JSON.stringify(departments));\n    this.departmentsSubject.next(departments);\n  }\n\n  private saveEmployeesToStorage(employees: Employee[]): void {\n    localStorage.setItem(this.EMPLOYEES_KEY, JSON.stringify(employees));\n    this.employeesSubject.next(employees);\n  }\n\n  // Department CRUD operations\n  getAllDepartments(): Department[] {\n    return this.getDepartmentsFromStorage();\n  }\n\n  getDepartmentById(id: string): Department | undefined {\n    return this.getDepartmentsFromStorage().find(dept => dept.id === id);\n  }\n\n  createDepartment(department: Omit<Department, 'id' | 'createdDate' | 'updatedDate'>): Department {\n    const departments = this.getDepartmentsFromStorage();\n    const newDepartment: Department = {\n      ...department,\n      id: this.generateId(),\n      createdDate: new Date(),\n      updatedDate: new Date()\n    };\n    \n    departments.push(newDepartment);\n    this.saveDepartmentsToStorage(departments);\n    return newDepartment;\n  }\n\n  updateDepartment(id: string, updates: Partial<Department>): Department | null {\n    const departments = this.getDepartmentsFromStorage();\n    const index = departments.findIndex(dept => dept.id === id);\n    \n    if (index !== -1) {\n      departments[index] = {\n        ...departments[index],\n        ...updates,\n        id,\n        updatedDate: new Date()\n      };\n      this.saveDepartmentsToStorage(departments);\n      return departments[index];\n    }\n    return null;\n  }\n\n  deleteDepartment(id: string): boolean {\n    const departments = this.getDepartmentsFromStorage();\n    const employees = this.getEmployeesFromStorage();\n    \n    // Check if department has employees\n    const hasEmployees = employees.some(emp => emp.departmentId === id);\n    if (hasEmployees) {\n      throw new Error('Cannot delete department with existing employees');\n    }\n    \n    const filteredDepartments = departments.filter(dept => dept.id !== id);\n    if (filteredDepartments.length !== departments.length) {\n      this.saveDepartmentsToStorage(filteredDepartments);\n      return true;\n    }\n    return false;\n  }\n\n  // Employee CRUD operations\n  getAllEmployees(): Employee[] {\n    return this.getEmployeesFromStorage();\n  }\n\n  getEmployeeById(id: string): Employee | undefined {\n    return this.getEmployeesFromStorage().find(emp => emp.id === id);\n  }\n\n  createEmployee(employee: Omit<Employee, 'id' | 'createdDate' | 'updatedDate'>): Employee {\n    const employees = this.getEmployeesFromStorage();\n    const newEmployee: Employee = {\n      ...employee,\n      id: this.generateId(),\n      createdDate: new Date(),\n      updatedDate: new Date()\n    };\n    \n    employees.push(newEmployee);\n    this.saveEmployeesToStorage(employees);\n    this.updateDepartmentEmployeeCount(newEmployee.departmentId);\n    return newEmployee;\n  }\n\n  updateEmployee(id: string, updates: Partial<Employee>): Employee | null {\n    const employees = this.getEmployeesFromStorage();\n    const index = employees.findIndex(emp => emp.id === id);\n    \n    if (index !== -1) {\n      const oldDepartmentId = employees[index].departmentId;\n      employees[index] = {\n        ...employees[index],\n        ...updates,\n        id,\n        updatedDate: new Date()\n      };\n      \n      this.saveEmployeesToStorage(employees);\n      \n      // Update department counts if department changed\n      if (updates.departmentId && updates.departmentId !== oldDepartmentId) {\n        this.updateDepartmentEmployeeCount(oldDepartmentId);\n        this.updateDepartmentEmployeeCount(updates.departmentId);\n      }\n      \n      return employees[index];\n    }\n    return null;\n  }\n\n  deleteEmployee(id: string): boolean {\n    const employees = this.getEmployeesFromStorage();\n    const employee = employees.find(emp => emp.id === id);\n    \n    if (employee) {\n      const filteredEmployees = employees.filter(emp => emp.id !== id);\n      this.saveEmployeesToStorage(filteredEmployees);\n      this.updateDepartmentEmployeeCount(employee.departmentId);\n      return true;\n    }\n    return false;\n  }\n\n  // Search and pagination\n  searchEmployees(criteria: SearchCriteria, page: number = 1, pageSize: number = 20): PaginatedResult<Employee> {\n    let employees = this.getEmployeesFromStorage();\n    \n    // Apply search filters\n    if (criteria.searchTerm) {\n      const searchTerm = criteria.searchTerm.toLowerCase();\n      employees = employees.filter(emp => \n        emp.firstName.toLowerCase().includes(searchTerm) ||\n        emp.lastName.toLowerCase().includes(searchTerm) ||\n        emp.email.toLowerCase().includes(searchTerm) ||\n        emp.position.toLowerCase().includes(searchTerm)\n      );\n    }\n    \n    if (criteria.departmentId) {\n      employees = employees.filter(emp => emp.departmentId === criteria.departmentId);\n    }\n    \n    if (criteria.status) {\n      employees = employees.filter(emp => emp.status === criteria.status);\n    }\n    \n    // Apply pagination\n    const totalItems = employees.length;\n    const totalPages = Math.ceil(totalItems / pageSize);\n    const startIndex = (page - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    const paginatedEmployees = employees.slice(startIndex, endIndex);\n    \n    return {\n      data: paginatedEmployees,\n      totalItems,\n      currentPage: page,\n      pageSize,\n      totalPages\n    };\n  }\n\n  getDepartmentsPaginated(page: number = 1, pageSize: number = 20): PaginatedResult<Department> {\n    const departments = this.getDepartmentsFromStorage();\n    const totalItems = departments.length;\n    const totalPages = Math.ceil(totalItems / pageSize);\n    const startIndex = (page - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    const paginatedDepartments = departments.slice(startIndex, endIndex);\n    \n    return {\n      data: paginatedDepartments,\n      totalItems,\n      currentPage: page,\n      pageSize,\n      totalPages\n    };\n  }\n\n  private updateDepartmentEmployeeCount(departmentId: string): void {\n    const employees = this.getEmployeesFromStorage();\n    const departments = this.getDepartmentsFromStorage();\n    \n    const employeeCount = employees.filter(emp => emp.departmentId === departmentId).length;\n    const departmentIndex = departments.findIndex(dept => dept.id === departmentId);\n    \n    if (departmentIndex !== -1) {\n      departments[departmentIndex].employeeCount = employeeCount;\n      departments[departmentIndex].updatedDate = new Date();\n      this.saveDepartmentsToStorage(departments);\n    }\n  }\n\n  private generateId(): string {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  private generateSampleData(): void {\n    // Create departments\n    const departments: Department[] = [\n      {\n        id: this.generateId(),\n        name: 'Human Resources',\n        description: 'Manages employee relations, recruitment, and HR policies',\n        manager: 'Sarah Johnson',\n        budget: 500000,\n        employeeCount: 0,\n        createdDate: new Date(),\n        updatedDate: new Date()\n      },\n      {\n        id: this.generateId(),\n        name: 'Information Technology',\n        description: 'Handles all technology infrastructure and software development',\n        manager: 'Michael Chen',\n        budget: 1200000,\n        employeeCount: 0,\n        createdDate: new Date(),\n        updatedDate: new Date()\n      },\n      {\n        id: this.generateId(),\n        name: 'Finance',\n        description: 'Manages financial planning, accounting, and budgeting',\n        manager: 'Jennifer Davis',\n        budget: 800000,\n        employeeCount: 0,\n        createdDate: new Date(),\n        updatedDate: new Date()\n      },\n      {\n        id: this.generateId(),\n        name: 'Marketing',\n        description: 'Responsible for brand promotion and customer acquisition',\n        manager: 'David Wilson',\n        budget: 900000,\n        employeeCount: 0,\n        createdDate: new Date(),\n        updatedDate: new Date()\n      },\n      {\n        id: this.generateId(),\n        name: 'Operations',\n        description: 'Oversees daily business operations and process improvement',\n        manager: 'Lisa Anderson',\n        budget: 700000,\n        employeeCount: 0,\n        createdDate: new Date(),\n        updatedDate: new Date()\n      },\n      {\n        id: this.generateId(),\n        name: 'Sales',\n        description: 'Drives revenue growth through customer relationships and sales',\n        manager: 'Robert Taylor',\n        budget: 1000000,\n        employeeCount: 0,\n        createdDate: new Date(),\n        updatedDate: new Date()\n      }\n    ];\n\n    localStorage.setItem(this.DEPARTMENTS_KEY, JSON.stringify(departments));\n\n    // Generate 50 employees\n    const firstNames = ['John', 'Jane', 'Michael', 'Sarah', 'David', 'Emily', 'Robert', 'Lisa', 'William', 'Jennifer', 'Christopher', 'Amanda', 'Daniel', 'Jessica', 'Matthew', 'Ashley', 'Anthony', 'Stephanie', 'Mark', 'Michelle', 'Steven', 'Kimberly', 'Paul', 'Donna', 'Andrew'];\n    const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez', 'Hernandez', 'Lopez', 'Gonzalez', 'Wilson', 'Anderson', 'Thomas', 'Taylor', 'Moore', 'Jackson', 'Martin', 'Lee', 'Perez', 'Thompson', 'White', 'Harris'];\n    const positions = ['Developer', 'Analyst', 'Manager', 'Coordinator', 'Specialist', 'Associate', 'Director', 'Supervisor', 'Representative', 'Consultant'];\n    const cities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose'];\n    const states = ['NY', 'CA', 'IL', 'TX', 'AZ', 'PA', 'TX', 'CA', 'TX', 'CA'];\n    const statuses: ('Active' | 'Inactive' | 'On Leave')[] = ['Active', 'Active', 'Active', 'Active', 'Inactive', 'On Leave'];\n\n    const employees: Employee[] = [];\n    \n    for (let i = 0; i < 50; i++) {\n      const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\n      const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\n      const departmentId = departments[Math.floor(Math.random() * departments.length)].id;\n      const cityIndex = Math.floor(Math.random() * cities.length);\n      \n      employees.push({\n        id: this.generateId(),\n        firstName,\n        lastName,\n        email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@company.com`,\n        phone: `(${Math.floor(Math.random() * 900) + 100}) ${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`,\n        departmentId,\n        position: positions[Math.floor(Math.random() * positions.length)],\n        salary: Math.floor(Math.random() * 100000) + 40000,\n        hireDate: new Date(2020 + Math.floor(Math.random() * 5), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),\n        status: statuses[Math.floor(Math.random() * statuses.length)],\n        address: {\n          street: `${Math.floor(Math.random() * 9999) + 1} ${['Main', 'Oak', 'Pine', 'Elm', 'Cedar'][Math.floor(Math.random() * 5)]} St`,\n          city: cities[cityIndex],\n          state: states[cityIndex],\n          zipCode: (Math.floor(Math.random() * 90000) + 10000).toString()\n        },\n        createdDate: new Date(),\n        updatedDate: new Date()\n      });\n    }\n\n    localStorage.setItem(this.EMPLOYEES_KEY, JSON.stringify(employees));\n\n    // Update department employee counts\n    departments.forEach(dept => {\n      dept.employeeCount = employees.filter(emp => emp.departmentId === dept.id).length;\n    });\n    \n    localStorage.setItem(this.DEPARTMENTS_KEY, JSON.stringify(departments));\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}